host: localhost:5000
info:
  contact: {}
  description: A RBAC service API in Golang using Gin framework
  title: RBAC EVENT API
  version: "1.0"
paths:
  /event:
    get:
      description: Retrieve a list of all events.
      produces:
      - application/json
      responses:
        "200":
          description: List of events retrieved successfully
      summary: Get all event resources
      tags:
      - resources
    post:
      description: Create a new event by providing title, description, start time,
        and end time.
      parameters:
      - description: Event title
        in: formData
        name: title
        required: true
        type: string
      - description: Event description
        in: formData
        name: description
        required: true
        type: string
      - description: Event start time (RFC3339 format)
        in: formData
        name: startTime
        required: true
        type: string
      - description: Event end time (RFC3339 format)
        in: formData
        name: endTime
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event created successfully
      summary: Create a new event resource
      tags:
      - resources
  /event/{id}:
    delete:
      description: Delete a specific event by providing its ID.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
      summary: Delete a specific event resource by ID
      tags:
      - resources
    get:
      description: Retrieve a specific event by providing its ID.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event retrieved successfully
      summary: Get a specific event resource by ID
      tags:
      - resources
    put:
      description: Update a specific event by providing its ID and new data.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: New event title
        in: formData
        name: title
        required: true
        type: string
      - description: New event description
        in: formData
        name: description
        required: true
        type: string
      - description: New event start time (RFC3339 format)
        in: formData
        name: startTime
        required: true
        type: string
      - description: New event end time (RFC3339 format)
        in: formData
        name: endTime
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
      summary: Update a specific event resource by ID
      tags:
      - resources
  /login:
    post:
      consumes:
      - application/json
      description: Login to the application with the provided username and password.
      parameters:
      - description: Username for login
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password for login
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      summary: Login to the application
      tags:
      - authentication
  /logout:
    get:
      description: Logout the user by clearing the authentication token cookie.
      produces:
      - application/json
      responses: {}
      summary: Logout and clear user's authentication token
      tags:
      - authentication
  /permission:
    get:
      description: Retrieve a list of all permissions.
      produces:
      - application/json
      responses:
        "200":
          description: List of permissions retrieved successfully
      summary: Get all permissions
      tags:
      - permissions
    post:
      description: Create a new permission by providing its name.
      parameters:
      - description: Name of the new permission
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission created successfully
      summary: Create a new permission
      tags:
      - permissions
  /permission/{id}:
    delete:
      description: Delete a specific permission by providing its ID.
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission deleted successfully
      summary: Delete a specific permission by ID
      tags:
      - permissions
    get:
      description: Retrieve a specific permission by providing its ID.
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission retrieved successfully
      summary: Get a specific permission by ID
      tags:
      - permissions
    put:
      description: Update a specific permission by providing its ID and new data.
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      - description: New name for the permission
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission updated successfully
      summary: Update a specific permission by ID
      tags:
      - permissions
  /profile:
    get:
      description: Retrieve a list of all user profiles, including their associated
        roles and permissions.
      produces:
      - application/json
      responses: {}
      summary: Get all user profiles with associated roles and permissions
      tags:
      - profiles
  /profile/{id}:
    get:
      description: Retrieve user profile by providing the user's ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get user profile by ID
      tags:
      - profiles
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided credentials and roles.
      parameters:
      - description: Username for registration
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password for registration
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: Roles for the user (e.g., ['admin', 'user'])
        in: body
        name: roles
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses: {}
      summary: Register a new user
      tags:
      - users
  /role:
    get:
      description: Get a list of all roles along with their associated permissions.
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
      summary: Get all roles with associated permissions
      tags:
      - roles
    post:
      description: Create a new role by providing its name and permissions.
      parameters:
      - description: Name of the role
        in: formData
        name: name
        required: true
        type: string
      - description: Array of permission names
        in: formData
        name: permissions
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Role created successfully
      summary: Create a new role
      tags:
      - roles
  /role/{id}:
    delete:
      description: Remove a specific role by providing its ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role removed successfully
      summary: Remove a specific role by ID
      tags:
      - roles
    get:
      description: Get details of a specific role by providing its ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role retrieved successfully
      summary: Get a specific role by ID
      tags:
      - roles
    put:
      description: Edit details of a specific role by providing its ID and new data.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: name for role
        in: body
        name: name
        required: true
        schema:
          type: string
      - description: permission for user
        in: body
        name: permissions
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Role edited successfully
      summary: Edit a specific role by ID
      tags:
      - roles
  /validate:
    get:
      description: Validate the user authentication token and return user information.
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Validate user authentication token
      tags:
      - authentication
swagger: "2.0"
